{"version":3,"sources":["hooks/useForm.js","components/ContactForm/validationRules.js","components/ContactForm/styles.js","components/ContactForm/index.js"],"names":["useForm","validate","useState","values","setValues","errors","setErrors","shouldSubmit","setShouldSubmit","useEffect","type","Object","keys","length","notification","message","description","handleChange","event","persist","target","name","value","handleSubmit","preventDefault","url","CONFIG","contacts","email","axios","post","then","test","TitleTop","styled","Title","theme","background","margin","TitleBottom","text","TitleContainer","Col","ContactContainer","div","Contact","section","FormGroup","form","accent","secondary","main","FormTitle","Subtitle","Span","span","ButtonContainer","Input","lazy","Button","TextArea","title","id","subtitle","t","useTranslate","ValidationType","ErrorMessage","cascade","splitTitle","split","top","bottom","getSplitTitle","justify","align","autoComplete","onSubmit","placeholder","onChange"],"mappings":"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","file":"static/js/22.2d7ccccb.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { notification } from \"antd\";\nimport axios from \"axios\";\nimport CONFIG from \"Config\";\n\nconst useForm = (validate) => {\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [shouldSubmit, setShouldSubmit] = useState(false);\n\n  const openNotificationWithIcon = (type) => {\n    notification[type]({\n      message: \"Success\",\n      description: \"Your message has been sent!\",\n    });\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setErrors(validate(values));\n    // Your url for API\n    const url = `https://mailthis.to/${CONFIG.contacts.email}`;\n    if (Object.keys(values).length === 3) {\n      axios\n        .post(url, {\n          ...values,\n        })\n        .then(() => {\n          setShouldSubmit(true);\n        });\n    }\n  };\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && shouldSubmit) {\n      setValues(\"\");\n      openNotificationWithIcon(\"success\");\n    }\n  }, [errors, shouldSubmit]);\n\n  const handleChange = (event) => {\n    event.persist();\n    setValues((values) => ({\n      ...values,\n      [event.target.name]: event.target.value,\n    }));\n    setErrors((errors) => ({ ...errors, [event.target.name]: \"\" }));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors,\n  };\n};\n\nexport default useForm;\n","export default function validate(values) {\n  let errors = {};\n  if (!values.name) {\n    errors.name = \"Name is required\";\n  }\n  if (!values.email) {\n    errors.email = \"Email address is required\";\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\n    errors.email = \"Email address is invalid\";\n  }\n  if (!values.message) {\n    errors.message = \"Message is required\";\n  }\n  return errors;\n}\n","import styled from \"styled-components\";\nimport { Title, Subtitle, Col } from \"Common\";\n\nexport const TitleTop = styled(Title)`\n  position: relative;\n  bottom: calc(72px * 1.75);\n  color: ${({ theme }) => theme.background};\n  @media only screen and (max-width: 480px) {\n    font-size: 2.5rem;\n    margin-left: ${({ theme }) => theme.margin}px;\n  }\n`;\n\nexport const TitleBottom = styled(Title)`\n  color: ${({ theme }) => theme.text};\n  position: relative;\n  bottom: calc(72px);\n  @media only screen and (max-width: 480px) {\n    font-size: 2.5rem;\n    margin-left: ${({ theme }) => theme.margin}px;\n  }\n`;\n\nexport const TitleContainer = styled(Col)`\n  height: 100%;\n  flex: 1;\n  max-width: 50%;\n  justify-content: space-between;\n`;\n\nexport const ContactContainer = styled.div`\n  padding: 5rem 0;\n  height: 100%;\n`;\n\nexport const Contact = styled.section`\n  position: relative;\n  width: 100%;\n  max-width: 1280px;\n`;\n\nexport const IconContainer = styled.div`\n  @media only screen and (min-width: 980px) {\n    padding: 10rem 7rem;\n  }\n`;\n\nexport const FormGroup = styled.form`\n  width: 100%;\n  background: ${({ theme }) => theme.background};\n  padding: ${({ theme }) => theme.margin * 2}px;\n  padding-bottom: ${({ theme }) => theme.margin * 4}px;\n  max-width: 520px;\n  border: 1px solid ${({ theme }) => theme.accent.secondary};\n  transition: all 0.5s;\n  box-shadow: none;\n  &:hover {\n    box-shadow: 0px -2px 10px ${({ theme }) => theme.accent.main};\n    border: 1px solid ${({ theme }) => theme.accent.main};\n  }\n  @media only screen and (max-width: 1045px) {\n    max-width: 100%;\n    margin-top: 2rem;\n  }\n  @media only screen and (max-width: 480px) {\n    padding: ${({ theme }) => theme.margin}px;\n  }\n`;\n\nexport const FormTitle = styled(Subtitle)`\n  color: ${({ theme }) => theme.accent.secondary};\n  margin: ${({ theme }) => theme.margin}px;\n`;\n\nexport const Span = styled.span`\n  display: block;\n  font-family: \"Ubuntu\", sans-serif;\n  font-weight: 600;\n  color: rgb(255, 130, 92);\n  height: 0.775rem;\n  padding: 0 0.675rem;\n`;\n\nexport const ButtonContainer = styled.div`\n  text-align: end;\n  position: relative;\n  @media only screen and (max-width: 414px) {\n    padding-top: 0.75rem;\n  }\n`;\n","import { lazy } from \"react\";\nimport { Row, Col } from \"antd\";\nimport useTranslate from \"Hooks/useTranslate\";\nimport Zoom from \"react-reveal/Zoom\";\n\nimport useForm from \"Hooks/useForm\";\nimport validate from \"./validationRules\";\n\nimport * as S from \"./styles\";\n\nconst Input = lazy(() => import(\"../../common/Input\"));\nconst Button = lazy(() => import(\"../../common/Button\"));\nconst TextArea = lazy(() => import(\"../../common/TextArea\"));\n\nconst Contact = ({ title, id, subtitle }) => {\n  const { t } = useTranslate();\n  const { values, errors, handleChange, handleSubmit } = useForm(validate);\n\n  const ValidationType = ({ type }) => {\n    const ErrorMessage = errors[type];\n    return errors[type] ? (\n      <Zoom cascade>\n        <S.Span>{ErrorMessage}</S.Span>\n      </Zoom>\n    ) : (\n      <S.Span />\n    );\n  };\n  const getSplitTitle = () => {\n    const splitTitle = t(title).split(\"\\n\");\n    return {\n      top: splitTitle?.[0] || \"\",\n      bottom: splitTitle?.[1] || \"\",\n    };\n  };\n\n  const splitTitle = getSplitTitle();\n  return (\n    <S.ContactContainer id={id}>\n      <S.Contact>\n        <Row type=\"flex\" justify=\"space-between\" align=\"middle\">\n          <S.TitleContainer>\n            <S.TitleTop>{splitTitle.top}</S.TitleTop>\n            <S.TitleBottom>{splitTitle.bottom}</S.TitleBottom>\n          </S.TitleContainer>\n          <Col>\n            <S.FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\n              <S.FormTitle>{t(subtitle)}</S.FormTitle>\n              <Col span={24}>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  id=\"Name\"\n                  placeholder=\"Your Name\"\n                  value={values.name || \"\"}\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"name\" />\n              </Col>\n              <Col span={24}>\n                <Input\n                  type=\"text\"\n                  name=\"email\"\n                  id=\"Email\"\n                  placeholder=\"Your Email\"\n                  value={values.email || \"\"}\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"email\" />\n              </Col>\n              <Col span={24}>\n                <TextArea\n                  placeholder=\"Your Message\"\n                  value={values.message || \"\"}\n                  name=\"message\"\n                  id=\"Message\"\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"message\" />\n              </Col>\n              <S.ButtonContainer>\n                <Button name=\"submit\" type=\"submit\">\n                  {t(\"send\")}\n                </Button>\n              </S.ButtonContainer>\n            </S.FormGroup>\n          </Col>\n        </Row>\n      </S.Contact>\n    </S.ContactContainer>\n  );\n};\n\nexport default Contact;\n"],"sourceRoot":""}